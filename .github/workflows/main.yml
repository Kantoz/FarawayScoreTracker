name: CI

on:
  workflow_dispatch:     
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build-test-docker:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    env:
      DOTNET_VERSION: "8.0.x"
      REGISTRY: ghcr.io
      IMAGE_NAME: scoretracker
      DOCKERFILE_PATH: ./Dockerfile
      CONTEXT_PATH: ./

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore ./Faraway.ScoreTracker.sln

      - name: Build (Release)
        run: dotnet build ./Faraway.ScoreTracker.sln -c Release --no-restore

      - name: Test
        run: dotnet test ./tests/Faraway.ScoreTracker.Tests/Faraway.ScoreTracker.Tests.csproj -c Release --no-build --logger "trx;LogFileName=testresults.trx"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testresults
          path: |
            **/TestResults/*.trx
            **/TestResults/**/*.xml
          if-no-files-found: ignore

      - name: Prepare image tags
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          OWNER_LC="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          SHORT_SHA="$(git rev-parse --short HEAD)"
          DATE="$(date -u +%Y%m%d)"
          IMAGE="${{ env.REGISTRY }}/${OWNER_LC}/${{ env.IMAGE_NAME }}"
          TAG_DATE_SHA="${DATE}-${SHORT_SHA}"
          echo "owner_lc=$OWNER_LC"           >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE"                 >> "$GITHUB_OUTPUT"
          echo "tag_date_sha=$TAG_DATE_SHA"   >> "$GITHUB_OUTPUT"
          echo "tag_sha=$SHORT_SHA"           >> "$GITHUB_OUTPUT"
          echo "tag_latest=latest"            >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --file "${{ env.DOCKERFILE_PATH }}" \
            --tag "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_date_sha }}" \
            --tag "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_latest }}" \
            "${{ env.CONTEXT_PATH }}"

      - name: Tag with short SHA
        run: |
          docker tag \
            "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_date_sha }}" \
            "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_sha }}"

      - name: Push all tags to GHCR
        run: |
          docker push "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_date_sha }}"
          docker push "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_sha }}"
          docker push "${{ steps.prep.outputs.image }}:${{ steps.prep.outputs.tag_latest }}"
